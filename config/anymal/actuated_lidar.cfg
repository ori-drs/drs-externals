coordinate_frames {
  
  ################## Sensor Frames ###################################
  ################## Sensor Frames ###################################
  MULTISENSE_CAMERA_LEFT {
    # this cannot change - its rigid
    relative_to = "head";
    history = 1000;
    update_channel = "HEAD_TO_LEFT_CAMERA_OPTICAL_FRAME";
    updated = false;
    initial_transform{
      # location of left camera:
      translation = [ 0.0, 0.035, -0.002];
      rpy = [ -90.0, 0.0, -90.0];
    }
  }
  
  MULTISENSE_CAMERA_RIGHT {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    update_channel = "CAMERA_LEFT_TO_CAMERA_RIGHT"; 
    initial_transform{
      translation = [ 0.070, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0];
    }
  }

  
  ################## Path from Camera to Laser: ####################################
  PRE_SPINDLE {
    # rosrun tf tf_echo multisense/left_camera_optical_frame  multisense/motor
    relative_to = "head";
    history = 5000;
    update_channel = "CAMERA_LEFT_TO_PRE_SPINDLE";
    updated = false;    
    initial_transform{
      translation = [0.0, 0.0, 0.0];
      rpy = [0,0,0];
    }
  }

  POST_SPINDLE {
    relative_to = "PRE_SPINDLE";
    history = 5000;
    max_frequency = 100;
    update_channel = "PRE_SPINDLE_TO_POST_SPINDLE";
    updated = true;    
    initial_transform{
      # pure rotation transform
      translation = [ 0.0, 0.0, 0.0 ];
      quat = [ 1,0,0,0 ];
    }
  }

  MULTISENSE_SCAN {
    relative_to = "POST_SPINDLE";
    history = 5000;
    update_channel = "POST_SPINDLE_TO_SCAN";
    updated = false;    
    initial_transform{
      # rosrun tf tf_echo multisense/spindle multisense/head_hokuyo_frame
      translation = [0.0, 0.0, 0.151];
      rpy = [-90, -90, 0];
    }
  }

  MULTISENSE_SCAN_FREE {
    relative_to = "MULTISENSE_SCAN";
    history = 1000;                       
    update_channel = "MULTISENSE_SCAN_TO_MULTISENSE_SCAN_FREE";
    initial_transform{
      translation=[  0.0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  } 

}


cameras {
  # fx fy skew cx cy 
  MULTISENSE_CAMERA_LEFT {
    lcm_channel = "MULTISENSE_CAMERA_LEFT";
    coord_frame = "MULTISENSE_CAMERA_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 1024;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [ 553.6858520507812, 553.6858520507812, 0, 517.0, 520.5 ];
    }
  }

  MULTISENSE_CAMERA_RIGHT {
    lcm_channel = "MULTISENSE_CAMERA_RIGHT";
    coord_frame = "MULTISENSE_CAMERA_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 1024;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [ 553.6858520507812, 553.6858520507812, 0, 517.0, 520.5 ];
    }
  }  

  MULTISENSE_CAMERA {
    lcm_channel = "MULTISENSE_CAMERA";
    type = "stereo";
    rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
    translation = [-0.0700, 0.0, 0.0];
  }
}


planar_lidars {
  MULTISENSE_SCAN {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }

  # required for mav estimator gpf (but not actually used for gpf)
  laser {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }

  MULTISENSE_SCAN_FREE {
    viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN_FREE";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }
}
