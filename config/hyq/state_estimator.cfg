state_estimator {
  # when processing from log set
  # false: republish_sensors, republish_cameras, publish_filter_state, gpf_vis, publish_diagnostics
  # true:  enable_at_launch (GPF), republish_incoming_poses (POSE_VICON & BDI)

  # when processing gpf:
  # init from vicon and ins but not pose_meas
  # use VICON_BODY when doing GPF from file
  # gpf_vis = false
  # additionally when running gpf out of process:
  # publish_filter_state=true
  # enable_at_launch = false

  # when running on robot use pose_meas to start from BDI Pose


  pose_channel = "POSE_BODY";
  filter_state_channel = "STATE_ESTIMATOR_STATE";

  # the frame at which to draw convariance information in viewer
  pose_render_frame = "body";

  publish_filter_state = true; # publish alongside pose
  publish_pose = true;
  republish_sensors = false; # if using a log, otherwise make s

  # ins, vicon, pose_meas
  init_sensors = ["ins","vicon"];

  # ins, hyq_kse, vicon, scan_matcher, laser_gpf, rgbd_gpf, fovis, pose_meas, laser_gpf_out_of_process
  active_sensors = ["ins","fovis"];

  # history is 1 second
  utime_history_span = 1000000;

  #initial state estimate (relavent states overridden by init sensors)
  sigma0 {
          vb = 0.15; # m/s
          chi_xy = 3.0; # degrees?
          chi_z = 3.0; # degrees?
          Delta_xy = 0.05; #0.5; # m
          Delta_z = 0.05; # 1;   # m

          gyro_bias = 0; # deg/s
          accel_bias = 0; # m/s^2 # 0.1 worked during tuning
  }

  x0 {
    velocity = [ 0, 0, 0 ];
    angular_velocity = [ 0, 0, 0 ];
    position = [ 0, 0, 0 ];
    rpy = [ 0, 0, 0 ];
  }

  init_message {
    channel = "MAV_STATE_EST_INITIALIZER";
  }

  viewer {
    channel = "MAV_STATE_EST_VIEWER_MEASUREMENT";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 1; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = true;
  }

  ins {
    channel ="MICROSTRAIN_INS";
    utime_offset = 0; # units 1e-6 seconds
    downsample_factor = 1; # process 1 out of every this many. for 333Hz use 1. for 1kHz use 3
    roll_forward_on_receive = true;
    publish_head_on_message = true;

    # microstrain: 0.5 | 0.2 | 0 | 0
    q_gyro = 0.5; # deg / s
    q_accel = 0.2; # m / s^2
    q_gyro_bias = 0.001; # deg / sec^2 | 0.001 suggested by charlie, but not deemed to be necessary
    q_accel_bias = 0.001; # m / sec^2 / sec | 0.001 suggested by charlie and worked well on logs

    # number of samples for the bias estimation
    num_to_init = 100; 
    
    accel_bias_initial = [0.000, 0.000, 0.000]; 
    accel_bias_recalc_at_start = true;
    accel_bias_update_online = true;

    gyro_bias_initial = [0.000038688, 0.00011614, 0.0020]; # rad/s
    gyro_bias_recalc_at_start = true;
    gyro_bias_update_online = true;
  
    frame = "ins";

    # REMEMBER TO CHANGE THIS IF YOU CHANGE THE IMU FREQUENCY or downsample factor
    timestep_dt = 0.002; # GX3 LCM driver 500 Hz

    # timestep_dt = 0.01; # GX3 SERIAL 100 Hz
    # timestep_dt = 0.004; # GAZEBO FREQUENCY 250 Hz    
    # timestep_dt = 0.0125; # GX3 old serial from logs 80 Hz

    # attempt to detect drastically incorrect initial gyro biases estimates:
    max_initial_gyro_bias = 0.015; # deg/sec, biases above this will be set to zero

    # apply notch filtering on input: (to atlas imu accel signals)
    atlas_filter = false;
    atlas_filter_freq = 87.0; # correct for after March 2014 work
  }

  scan_matcher {
    channel = "SCAN_MATCHER";
    utime_offset = 0;
    downsample_factor = 1; # process 1 out of every this many

    roll_forward_on_receive = true;
    publish_head_on_message = false;
    
    use_velodyne = false;
    init_with_message = true;

    output_channel = "SCAN_MATCHER";
    init_channel = "POSE_GROUND_TRUTH";
    
    mode = "position_yaw"; # yaw for drc, position 

    r_pxy = 0.01; # sigma position x y [m]
    r_pz =  0.03; # sigma position z [m]

    r_vxy = 0.06; # sigma velocity x y [m/s]
    r_vz =  0.04; # sigma velocity z [m/s]

    r_yaw = 3.0; # sigma yaw [deg]
  }

  vicon {
    channel = "TRANSF_GROUND_TRUTH";

    mode = "orientation"; # position, position_orient, orientation, yaw 

    apply_frame = false; # ???

    r_xyz = 0.01; # sigma position x y z [m]
    r_chi = 3.0; # sigma orientation [deg]

    downsample_factor = 10;

    roll_forward_on_receive = true;
    publish_head_on_message = false;

    utime_offset = 0;
  }

  # correct the pose to this value: (to init using Pose BDI)
  pose_meas{
    no_corrections = 100; # apply this number of corrections before going silent
    channel = "POSE_DEBUG";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 1; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    r_xyz = .01; #m
    r_chi = 3.0; #degrees

    mode="position_orient"; # "position" "position_orient"
  }

   laser_gpf_out_of_process {
    utime_offset = 0;
    downsample_factor = 1; # i dont think this is used
    channel = "GPF_MEASUREMENT";
    roll_forward_on_receive = true;
    publish_head_on_message = false;
  }

  laser_gpf {
    utime_offset = 0;
    downsample_factor = 1;  # was 3 but rrg use 1
    channel = "MULTISENSE_SCAN";
    sensor_mode="laser"; # laser or pointcloud
    roll_forward_on_receive = true;
    publish_head_on_message = false;
    gpf_vis = true;

    # map_name = "from_lcm"; # this means it will be transmitted at launch
    map_name = "octomap.bt_blurred";

    blur_sigma = 0.4;

    gpf_num_samples = 2000; # 1000 seemed to be noticably better than 500 (which I used alot)

    # according to abe:
    # pos_only - less accurate
    # pos_yaw  - sufficient/typical for fixie
    # pos_chi  - more accurate, use this initially for kmcl
    # mfallon: drc initially used pos_yaw
    gpf_substate = "pos_yaw";

    #laser projection settings
    projection_mode = "motion_interpolate"; # just added, this was motion_project by default, but now using motion_interpolate.
    beam_skip = 16;
    spatial_decimation_min = 0;
    spatial_decimation_max = .5;

    #-----------gpf probability settings-----------
    max_weight_proportion = 0.999; # max sum, for illconditioning. was hard coded as 0.99

    #log-likelihood of an unknown cell in the map
    unknown_loglike = -12.0; #original value used for johnson/parking garage 2012-5-13

    # gpf cov is scaled by sigma_scaling^2 via division of summed log probabilities
    sigma_scaling = 8.16;

    # enable the GPF at launch. bit flip with: STATE_EST_LASER_ENABLE/DISABLE. (mfallon april 2014)
    # this should be false for typical operartion but true for log testing
    enable_at_launch = true;
  }


  fovis {

    channel = "VO_DELTA_BODY_SINCE_REF";
    # lin, lin_rate, rot_rate
    mode = "lin"; 

    # position variances:
    r_pxy = 0.01;  # m
    r_pz = 0.01;  # m
    r_pang  = 0.5;  # degrees?, not implemented

    # velocity variances:
    # 0.50 looks good for very difficult logs
    r_vxyz = 0.003;  # m/s
    # scan matchered used 1.0
    r_vang  = 0.50;  # degrees?

    utime_offset = 0;
    downsample_factor = 1;
    roll_forward_on_receive = true;
    publish_head_on_message = false;
  }

  legodo {
    channel = "HYQ_STATE";
    ground_truth_channel = "POSE_GROUND_TRUTH";

    time_offset = 0.0; # time offset between vicon and other messages (useful for logs)
    verbose = true; # Prints warnings and messages 
    debug = true; # Sends signals and saves text files with signals
    robot = "HyQ"; # HyQ, HyQ2Max

    kse_mode = 3; # STATIC_SIGMA 0x00, VAR_SIGMA 0x01, IMPACT_SIGMA 0x02, WEIGHTED_AVG 0x04, ALPHA_FILTER = 0x08, KALMAN_FILTER = 0x10
                  # Possible combinations:  0 (no sigma, no filter), 
                  #                         1 (var sigma, no filter), 
                  #                         2 (impact sigma, no filter), 
                  #                         3 (var sigma + impact sigma, no filter)
                  #                         4 (no sigma, weighted a verage, no filter), 
                  #                         5 (var sigma, weighted average, no filter), 
                  #                         6 (impact sigma, weighted average, no filter), 
                  #                         7 (var sigma + impact sigma, weighted average, no filter)
                  #                         8 (no sigma, alpha filter), 
                  #                         9 (var sigma, alpha filter), 
                  #                        10 (impact sigma, alpha filter), 
                  #                        11 (var sigma + impact sigma, alpha filter),
                  #                        12 (no sigma, weighted average, alpha filter)
                  #                        13 (var sigma, weighted average, alpha filter)
                  #                        14 (impact sigma, weighted average, alpha filter)
                  #                        15 (var sigma + impact sigma, weighted average, alpha filter)
                  #                        16 (no sigma, kalman filter)
                  #                        17 (var sigma, kalman filter)
                  # 		           18 (impact sigma, kalman filter)
                  #                        19 (var sigma + impact sigma, kalman filter)
                  #                        20 (no sigma, weighted average, kalman filter)
                  #                        21 (var sigma, weighted average, kalman filter)
                  #                        22 (impact sigma, weighted average, kalman filter)
                  #                        23 (var sigma + impact sigma, weighted average, kalman filter)
    
    grf_mode = 1; # 0 = THRESHOLD, 1 = HYSTERESIS, 2 = REGRESSION
    stance_threshold = 50; # threshold of GRF[z] to trigger the stance phase
    
    stance_hysteresis_low = 10; # hysteresis low threshold
    stance_hysteresis_high = 60; # hysteresis high threshold
    stance_hysteresis_delay_low = 250; # delay low for schmitt trigger in milliseconds
    stance_hysteresis_delay_high = 250; # delay in for schmitt trigger in milliseconds

    stance_alpha = 0.02; # alpha for the alpha filter
    
    stance_regression_beta_size = 8; # 2 (same value for all legs), 8 
    # logistic regression parameters: beta0 beta1
    stance_regression_beta = [3.7252,-0.018077,2.8191,-0.015947,3.2241,-0.018661,3.8836,-0.019669];    
    r_vx = 0.03; # sigma velocity x
    r_vy = 0.03; # sigma velocity y
    r_vz = 0.03; # sigma velocity z
    
    # true only if you have stance ground truth from simulation
    sim_stance_gt = false; 
    
    downsample_factor = 1;
    utime_offset = 0; # don't confuse with time_offset

    roll_forward_on_receive = true;
    publish_head_on_message = false;  
  }
}
