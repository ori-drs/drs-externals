coordinate_frames {
  
  ################## Sensor Frames ###################################
  MULTISENSE_CAMERA_LEFT {
    # this cannot change - its rigid
    relative_to = "head";
    history = 1000;
    update_channel = "HEAD_TO_LEFT_CAMERA_OPTICAL_FRAME";
    initial_transform{
      # location of left camera:
      # i dont think .....78242 is taken care of the URDF transforms...
      translation = [ 0.0, 0.0347450367025676, -0.002];
      rpy = [ -90.0, 0.0, -90.0];      
    }
  }  
  
  MULTISENSE_CAMERA_RIGHT {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    # Fixed, read from CRL camera
    update_channel = "CAMERA_LEFT_TO_CAMERA_RIGHT"; 
    initial_transform{
      # antone: updated on 2014-07-09 for upgraded multisense unit 05
      translation = [ 0.0694900734051353, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0];
    }
  }

  CAMERA_ANAGLYPH {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    initial_transform{
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0];
    }    
  }
  
  ################## Path from Camera to Laser: ####################################
  PRE_SPINDLE {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    update_channel = "CAMERA_LEFT_TO_PRE_SPINDLE";
    initial_transform{
      # antone 2014-07-09: calibrated values (using box target)
      translation = [ 0.041308583524502, -0.090003168809851, -0.028846410278347 ];
      quat = [ 0.710499741138623, 0.000714664831623, 0.002862584285006, 0.703691276560495 ];
    }
  }    
  
  POST_SPINDLE {
    relative_to = "PRE_SPINDLE";
    history = 1000;
    update_channel = "PRE_SPINDLE_TO_POST_SPINDLE";
    initial_transform{
      # pure rotation transform
      translation = [ 0.0, 0.0, 0.0 ];
      quat = [ 1,0,0,0 ];
    }
  }      
  
  
  MULTISENSE_SCAN {
    relative_to = "POST_SPINDLE";
    history = 1000;
    update_channel = "POST_SPINDLE_TO_MULTISENSE_SCAN";
    initial_transform{
      # antone 2014-07-09: calibrated values (using box target)
      translation = [ -0.000744986810751, 0.019310256319124, 0.000149912422437 ];
      quat = [ 0.496637130899519, -0.492381687666844, -0.503247117659410, -0.507596466132044 ];
    }
  }   
  

  MULTISENSE_SCAN_FREE {
    relative_to = "MULTISENSE_SCAN";
    history = 1000;
    update_channel = "MULTISENSE_SCAN_TO_MULTISENSE_SCAN_FREE";
    initial_transform{
      translation = [0,0,0];
      quat = [ 1,0,0, 0];
    }
  }  

}


cameras {
  # fx fy skew cx cy 
  MULTISENSE_CAMERA_LEFT {
    lcm_channel = "MULTISENSE_CAMERA_LEFT";
    coord_frame = "MULTISENSE_CAMERA_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 1024;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      # antone: updated on 2014-07-09 for upgraded multisense unit 05
      pinhole = [ 555.223083496093750, 555.223083496093750, 0, 512, 512 ];
    }
  }
  
  MULTISENSE_CAMERA_RIGHT {
    lcm_channel = "MULTISENSE_CAMERA_RIGHT";
    coord_frame = "MULTISENSE_CAMERA_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 1024;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      # antone: updated on 2014-07-09 for upgraded multisense unit 05
      pinhole = [ 555.223083496093750, 555.223083496093750, 0, 512, 512 ];
    }
  }  

  MULTISENSE_CAMERA {
    lcm_channel = "MULTISENSE_CAMERA";
    type = "stereo";
    rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
    translation = [-0.0694900734051353, 0.0, 0.0]; # taken from CRL's calibration
  }

  CAMERA_ANAGLYPH {
    lcm_channel = "CAMERA_ANAGLYPH";
    coord_frame = "CAMERA_ANAGLYPH";
    intrinsic_cal{
      width = 1024;
      height= 1024;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      # antone: updated on 2014-07-09 for upgraded multisense unit 05
      pinhole = [ 555.223083496093750, 555.223083496093750, 0, 512, 512 ];
    }
  }

}




planar_lidars {
  MULTISENSE_SCAN {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }
  MULTISENSE_SCAN_FREE {
    viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN_FREE";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }

  # required for MAV-estimator:
  laser {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    # typically 0.1. need this to be larger for the estimator
    min_range = 2.0; 
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }
}
