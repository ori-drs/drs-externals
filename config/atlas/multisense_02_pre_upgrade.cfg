coordinate_frames {
  
  ################## Sensor Frames ###################################
  MULTISENSE_CAMERA_LEFT {
    # this cannot change - its rigid
    relative_to = "head";
    history = 1000;
    update_channel = "HEAD_TO_LEFT_CAMERA_OPTICAL_FRAME";
    initial_transform{
      # location of left camera:
      # i dont think .....78242 is taken care of the URDF transforms...
      translation = [ 0.0, 0.035078242, -0.002];
      rpy = [ -90.0, 0.0, -90.0];      
    }
  }  
  
  MULTISENSE_CAMERA_RIGHT {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    # Fixed, read from CRL camera
    update_channel = "CAMERA_LEFT_TO_CAMERA_RIGHT"; 
    initial_transform{
      translation = [ 0.0701564848423, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0];
    }
  }

  CAMERA_ANAGLYPH {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    initial_transform{
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0];
    }    
  }
  
  ################## Path from Camera to Laser: ####################################
  PRE_SPINDLE {
    relative_to = "MULTISENSE_CAMERA_LEFT";
    history = 1000;
    update_channel = "CAMERA_LEFT_TO_PRE_SPINDLE";
    initial_transform{
      # rigid, read from sensor by mfallon, aug 2013
      #translation = [ 0.034024, -0.107727, 0.008747 ];
      #quat = [ 0.714312, -0.000002, 0.000000, 0.699827 ];
      
      # mfallon diy monday 26aug 2013: (was used for 4 weeks)
      #translation = [ 0.0350, -0.0777, -0.0133];
      #rpy = [-0.3002, -1.8998, 89.6263];
      
      # mfallon diy monday 25sept 2013:
      translation = [ 0.035, -0.0907, -0.0083];
      rpy = [0.2998, -1.3998, 88.5263];

    }
  }    
  
  POST_SPINDLE {
    relative_to = "PRE_SPINDLE";
    history = 1000;
    update_channel = "PRE_SPINDLE_TO_POST_SPINDLE";
    initial_transform{
      # pure rotation transform
      translation = [ 0.0, 0.0, 0.0 ];
      quat = [ 1,0,0,0 ];
    }
  }      
  
  
  MULTISENSE_SCAN {
    relative_to = "POST_SPINDLE";
    history = 1000;
    update_channel = "POST_SPINDLE_TO_MULTISENSE_SCAN";
    initial_transform{
      translation = [ -0.000000, 0.018196, 0.000000 ];
      quat = [ 0.494188, -0.496592, -0.505789, -0.503341 ];
    }
  }   
  

  MULTISENSE_SCAN_FREE {
    relative_to = "MULTISENSE_SCAN";
    history = 1000;
    update_channel = "MULTISENSE_SCAN_TO_MULTISENSE_SCAN_FREE";
    initial_transform{
      translation = [0,0,0];
      quat = [ 1,0,0, 0];
    }
  }  

}


cameras {
  # fx fy skew cx cy 
  MULTISENSE_CAMERA_LEFT {
    lcm_channel = "MULTISENSE_CAMERA_LEFT";
    coord_frame = "MULTISENSE_CAMERA_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 544;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [557.1886596679688, 557.1886596679688, 0, 512.0, 272.0];
    }
  }
  
  MULTISENSE_CAMERA_RIGHT {
    lcm_channel = "MULTISENSE_CAMERA_RIGHT";
    coord_frame = "MULTISENSE_CAMERA_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 544;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [557.1886596679688, 557.1886596679688, 0, 512.0, 272.0];
    }
  }  

  MULTISENSE_CAMERA {
    lcm_channel = "MULTISENSE_CAMERA";
    type = "stereo";
    rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
    translation = [-0.0701564848423, 0.0, 0.0]; # taken from CRL's calibration
  }

  CAMERA_ANAGLYPH {
    lcm_channel = "CAMERA_ANAGLYPH";
    coord_frame = "CAMERA_ANAGLYPH";
    intrinsic_cal{
      width = 1024;
      height= 544;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [557.1886596679688, 557.1886596679688, 0, 512.0, 272.0];
    }
  }

}




planar_lidars {
  MULTISENSE_SCAN {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }
  MULTISENSE_SCAN_FREE {
    viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
    max_range = 29.0;
    min_range = 0.1;
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN_FREE";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }

  # required for MAV-estimator:
  laser {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 29.0;
    # typically 0.1. need this to be larger for the estimator
    min_range = 2.0; 
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "MULTISENSE_SCAN";
    lcm_channel = "MULTISENSE_SCAN";
    surround_region = [0, 1000000];        
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 29.0;
  }
}
