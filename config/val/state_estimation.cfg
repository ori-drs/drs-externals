state_estimator {
  # when processing from log set
  # false: republish_sensors, republish_cameras, publish_filter_state, gpf_vis, publish_diagnostics
  # true:  enable_at_launch (GPF), republish_incoming_poses (POSE_VICON & POSE_BODY_ALT)

  # when processing gpf:
  # init from vicon and ins but not pose_meas
  # use VICON_BODY when doing GPF from file
  # gpf_vis = false
  # additionally when running gpf out of process:
  # publish_filter_state=true
  # enable_at_launch = false

  # when running on robot use pose_meas to start from POSE_BODY_ALT

  pose_channel = "POSE_BODY"; # was POSE_BODY_ALT
  filter_state_channel = "STATE_ESTIMATOR_STATE";
  # the frame at which to draw convariance information in viewer
  pose_render_frame = "body"; # was body_alt

  publish_filter_state = false; #publish alongside pose
  publish_pose = true;
  republish_sensors = false; # make this false when not reading directly from a log

  # ins,vicon, pose_meas, viewer
  init_sensors = ["ins","vicon"];
  # laser_gpf, ins, rgbd_gpf, fovis, legodo , vicon, pose_meas, scan_matcher, yawlock
  active_sensors = ["ins", "legodo", "yawlock"];

  # was this: 1000000 (1sec) for mav
  utime_history_span =1000000;

  #initial state estimate (relavent states overridden by init sensors)
  sigma0 {
          vb = 0.15; #m/s
          chi_xy = 3.0; #degrees
          chi_z = 3.0; #degrees
          Delta_xy = 0.05;#.5; #m
          Delta_z = 0.05;#1;    #m

          gyro_bias = 0; #deg/seg
          accel_bias = 0; #m/s^2 # 0.1 worked during tuning
  }

  ## typical atlas height
  x0 {
    velocity = [0,0,0];
    angular_velocity = [0,0,0];
    position = [0, 0, 0.85];
    rpy = [0, 0, 0];
  }

  init_message {
    channel = "MAV_STATE_EST_INITIALIZER";
  }

  viewer {
    channel = "MAV_STATE_EST_VIEWER_MEASUREMENT";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 1; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = true;
  }

  ins {
    channel ="IMU_pelvisRearImu";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 2; # process 1 out of every this many. for 500Hz use 2 to output at 250Hz
    roll_forward_on_receive = true;
    publish_head_on_message = true;

    # microstrain: 0.5 | 0.2 | 0 | 0
    # i always used 0.5 | 0.2 | 0 | 0
    q_gyro = 0.5; #deg/sec
    q_accel = 0.2; #m/s^2
    q_gyro_bias = 0.01; #deg/seg^2 | 0.001 suggested by charlie, but not deemed to be necessary
    q_accel_bias = 0.0; #m/sec^2/sec | 0.001 suggested by charlie and worked well on logs
    frame = "imu";

    #Valkyrie
    timestep_dt = 0.004; # this is nominal 250Hz

    num_to_init = 500; # was 100 for microstrain, 333/1000 for MIT
    # attempt to detect drastically incorrect initial gyro biases estimates:
    max_initial_gyro_bias = 0.002; # deg/sec, biases above this will be set to zero

    # apply notch filtering on input: (to atlas imu accel signals)
    atlas_filter = true;
    atlas_filter_freq = 87.0; # correct for after March 2014 work


    # Fine control of bias estimation
    # initial is a user specified bias vector
    # if (recalc) then estimate the bias again at launch
    # if (update) then allow biases to evolve
    gyro_bias_initial = [0,0,0];
    gyro_bias_recalc_at_start = true;
    gyro_bias_update_online = true;

    accel_bias_initial = [0,0,0];
    accel_bias_recalc_at_start = false;
    accel_bias_update_online = false;
  }

  yawlock {
    channel = "CORE_ROBOT_STATE";
    utime_offset = 0;
    downsample_factor = 1;
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    # Which mode of the yawlock to use:
    mode = "yawbias_yaw";
    # "yaw" to suppress yaw drift (1st order)
    # "yawbias" to estimate yaw rate drift (2nd order)
    # "yawbias_yaw" to do both


    # Channel which tells us if we are standing
    behavior_channel = "ROBOT_BEHAVIOR"; # or CONTROLLER_STATUS for Drake
    # Number of tics between corrections of yaw mode (only)
    correction_period = 333;

    # should you detect a yaw slip of yaw_slip_threshold_degrees
    # dont update lock for yaw_slip_disable_period seconds
    yaw_slip_detect = true; # was true for atlas
    yaw_slip_threshold_degrees = 1.5; # degrees
    yaw_slip_disable_period = 5.0; # seconds

    # smaller is more confident
    r_yaw = 50.0; # as used for stand alone process with Atlas

    # yaw bias measurement uncertainty, 10-30 seems reasonable
    r_yaw_bias = 30;
  }

  gps{
    channel = "UBLOX_GPS_DATA";
    #utime_offset = 273200; #.27 second delay optimized for on 11-05-03-outdoors.01
    utime_offset = 145000; #.145 second delay from fixie-gps-2012-05-12.02
    #utime_offset = 0;
    downsample_factor = 1; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    r_xy = 2.0; #m
    r_z = 2.0; #m
  }

  scan_matcher{
    channel = "POSE_YAW_LOCK";
    utime_offset = 0;
    downsample_factor = 1; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = false;
    mode = "yaw";

    r_pxy = 0.0; # no used here
    r_pz =  0.0; # no used here
    r_vz =  0.0; # no used here
    r_yaw = 50.0;
  }

  vicon{
    channel = "VICON_pelvis_val";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 10; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    r_xyz = .01; #m
    r_chi = 3.0; #degrees

    # typically position was used
    mode="position_orient"; # "position_orient" or "position"

    # added mfallon, apply this transform to put vicon in body frame
    # as vicon data is assumed to be in the frame defined by Vicon's software
    apply_frame = true;
    frame_from = "body_vicon";
    frame_to = "vicon_frame";
  }

  # correct the pose to this value: (to init using POSE_BODY_ALT)
  pose_meas{
    no_corrections = 100; # apply this number of corrections before going silent
    channel = "POSE_BODY_ALT";
    utime_offset = 0; #units 1e-6 seconds
    downsample_factor = 10; # process 1 out of every this many
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    r_xyz = .01; #m
    r_chi = 3.0; #degrees

    mode="position_orient"; # "position" "position_orient"
  }

  laser_gpf_out_of_process {
    utime_offset = 0;
    downsample_factor = 1; # i dont think this is used
    channel = "GPF_MEASUREMENT_QUICK_LOCK";
    roll_forward_on_receive = true;
    publish_head_on_message = false;
  }

  laser_gpf {
    utime_offset = 0;
    downsample_factor = 1;  # was 3 but rrg use 1
    channel = "SCAN";
    roll_forward_on_receive = true;
    publish_head_on_message = false;
    gpf_vis = false;

    # N9:
    #map_name = "/home/mfallon/data/atlas/2014-01-21-vicon-walking/octomap/n9-2014-01-21.bt_blurred_0.5";
    map_name = "octomap.bt_blurred";
    #map_name = "from_lcm"; # this means it will be transmitted at launch
    blur_sigma = 0.3;# 0.3 # added by mfallon. was 0.5 previously in a stand alone process

    # 300 is bare min
    gpf_num_samples = 1000; # 1000 seemed to be noticably better than 500 (which I used alot)

    # according to abe:
    # pos_only - less accurate
    # pos_yaw  - sufficient/typical for fixie
    # pos_chi  - more accurate, use this initially for kmcl
    # mfallon: drc initially used pos_yaw
    gpf_substate = "pos_yaw";

    #laser projection settings
    projection_mode = "motion_interpolate"; # just added, this was motion_project by default, but now using motion_interpolate.
    beam_skip = 16;
    spatial_decimation_min = 0;
    spatial_decimation_max = .5;

    #-----------gpf probability settings-----------
    max_weight_proportion = 0.999; # max sum, for illconditioning. was hard coded as 0.99

    #log-likelihood of an unknown cell in the map
    unknown_loglike = -12.0; #original value used for johnson/parking garage 2012-5-13

    #gpf cov is scaled by sigma_scaling^2 via division of summed log probabilities
    # mfallon, jan 2014: mav used 8.16. I'm going to use something much smaller, mfallon
    # mfallon, mar 2014: i think this should actually be higher if not decimating
    sigma_scaling = 8.16; #8.16 # should be identical to "adams magic scaling factor used for johnson/parking garage 2012-5-13

    # enable the GPF at launch. bit flip with: STATE_EST_LASER_ENABLE/DISABLE. (mfallon april 2014)
    # this should be false for typical operartion but true for log testing
    enable_at_launch = false;
  }


  rgbd_gpf {
    utime_offset = 0; #units 1e-6 seconds
    #if running in a separate process the downsampling is applied before processing, and as many as can be processed will be (it will hog cpu)
    # laser 40Hz df: 3 | rgbd 10Hz df: 1
    downsample_factor = 1; # process 1 out of every this many laser readings (come at 40hz)

    #channel = "RGBD_GPF_MEASUREMENT";
    channel = "KINECT_FRAME";
    roll_forward_on_receive = true;
    publish_head_on_message = false;


    # N9:
    map_name = "rgbd_octomap.bt_blurred_0.5";
    gpf_vis = true;

    # 300 is bare min
    gpf_num_samples = 500;

    # according to abe:
    # pos_only - less accurate
    # pos_yaw  - sufficient/typical for fixie
    # pos_chi  - more accurate, use this initially for kmcl
    gpf_substate = "pos_yaw";

    #laser projection settings
    beam_skip = 16;
    spatial_decimation_min = 0;
    spatial_decimation_max = .5;

    #-----------gpf probability settings-----------

    #log-likelihood of an unknown cell in the map
    unknown_loglike = -12.0; #original value used for johnson/parking garage 2012-5-13

    #gpf cov is scaled by sigma_scaling^2 via division of summed log probabilities
    sigma_scaling = 8.16; #3 or  8.16 should be identical to adams magic scaling factor used for johnson/parking garage 2012-5-13
  }


  fovis {

    channel = "KINECT_REL_ODOMETRY";
    mode = "lin_rate"; # linear and rotation rates i.e. velocities

    # velocity variances:
    # 0.50 looks good for very difficult logs
    r_vxyz = 5.0;  # m/s
    # scan matchered used 1.0
    r_vang  = 0.50;  # degrees?

    utime_offset = 0;
    downsample_factor = 1;
    roll_forward_on_receive = true;
    publish_head_on_message = false;
  }

  legodo {

    channel = "CORE_ROBOT_STATE";
    channel_force_torque = "FORCE_TORQUE";
    # lin_rate           linear velocities
    # lin_rot_rate       linear and rotation rates i.e. velocities
    # pos_and_lin_rate   position and linear velocities
    mode = "lin_rate";

    ##########################
    # [velocity] variances:
    # 0.5 the SE velocity tracks the kinematics - but too closely corrects to spikes
    #     when foot contacts occur the velocities spike. need to classify  (@333Hz)
    # 0.25 was what I used in later development  (@333Hz)
    # 0.1 is too low - the velocity corrections made wheren't physically possible.  (@333Hz)
    #     but when paired with lidar,  this worked well (@1kHz)
    # 1.5 paired with a position variance of 0.05m seemed to reduce position jerks in scott's controller transitions
    r_vxyz = 0.50;  # m/s
    r_vang  = 0.50;  # degrees?

    #### Variance for uncertain walking kinematics e.g. breaking and making contact
    # Setting equal to the above values makes this mode disabled
    # 0.75 and 1.00 worked well on batch processing
    r_vxyz_uncertain = 0.50;# 0.75;
    r_vang_uncertain = 0.50;# 1.00;

    ## Variance for Direct [Position] Measurement [NEW]
    # shared between modes
    # 1-2 looks good (with laser, at ~280Hz)
    # 4 twitch is beginning to appear (with laser)
    # 0.05m was useful (without laser), see above
    r_xyz = 2.0;
    ##########################

    utime_offset = 0;
    downsample_factor = 3; # process 1 out of every this many. for 333Hz use 1. for 1kHz use 3
    roll_forward_on_receive = true;
    publish_head_on_message = false;

    # left foot at zero or body/pelvis at POSE_BDI
    initialization_mode = "zero";
    # basic, slaved_once, slaved_always
    integration_mode = "slaved_always";

    # Assume for this number of tics, velocity measurements are zero at start
    # This is due to coupling between kinematics and orientation
    zero_initial_velocity = 200; # Less than 75 was unstable for Valkyrie, 100 was unstable for Atlas

    # Republish various channels (if reading from a log)
    republish_incoming_poses = false; # republish Vicon to POSE_VICON
    republish_cameras = false;
    publish_diagnostics = false;

    # either foot or talus:
    left_standing_link = "leftFoot";
    right_standing_link = "rightFoot";

    # filter joint positions: "none", "lowpass", "kalman".
    # was always lowpass when running with bdi stepping. scott may need kalman
    filter_joint_positions = "none";
    joint_process_noise = 0.01; # proc. and obs. variances for kalman filtering ONLY
    joint_observation_noise = 5E-4;

    # filter kinematics when we think contact occurs
    filter_contact_events = true;

    # Contact Classifier Parameters:
    total_force = 1350.0; # valkyrie
    init_contact_mode = "typical"; # "typical" (for toe off and BDI) or "standing" (for mit control, originally)
    standing_schmitt_level = 0.65; # percentage of atlas_weight, 0.65 for a very long time, but needed higher value for standing

    # "typical" contact mode uses FootContactAlt class in SE
    schmitt_low_threshold = 385; # newtons 535
    schmitt_high_threshold = 450; # newtons 600
    schmitt_low_delay = 100000; # microseconds
    schmitt_high_delay = 100000; # microseconds

    # Adjust the joint angles using the IHMC torque correction method.
    # adjustment_gain is the spring constant (in radians per Newton-meter of
    # the corresponding joint. The adjustment_gain can be set to inf for
    # joints with no torque deflection. These settings are used both for
    # control and state estimation:
    torque_adjustment = true;

    adjustment_joints = ["leftHipYaw", "leftHipRoll", "leftHipPitch", 
                         "leftKneePitch", "leftAnklePitch", "leftAnkleRoll", 
                         "rightHipYaw", "rightHipRoll", "rightHipPitch", 
                         "rightKneePitch", "rightAnklePitch", "rightAnkleRoll"];
    adjustment_gain  =  [10000, 8000, 10000,
                         10000, 10000, 10000,
                         10000, 8000, 10000,
                         10000, 10000, 10000];

    use_controller_input = true;
  }

  legodo_external {

    # Channel Subscribed to:
    channel = "LEG_ODOMETRY_DELTA";

    # All other parameters are taken from legodo block
  }

}

